name: Build and Release Bored Plugin

on:
    push:
        # branches:
        #   - master
        tags:
            - "v*"

# Permissions for GITHUB_TOKEN (principle of least privilege)
permissions:
    contents: write # Needed for creating releases
    issues: read
    pull-requests: read

# Add restrictions for parallel runs
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        runs-on: windows-latest
        strategy:
            matrix:
                include:
                    - platform: x64
                      runtime: win-x64
                    - platform: ARM64
                      runtime: win-arm64
            fail-fast: false # Continue with other platforms if one fails

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1 # Shallow clone for faster checkout

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: "9.0.x"

            # Add caching for NuGet packages
            - name: Cache NuGet packages
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            # Restore dependencies separately for better caching
            - name: Restore dependencies
              run: dotnet restore Bored/Bored.sln -p:Platform="${{ matrix.platform }}" -r ${{ matrix.runtime }}

            # Publish trimmed output per architecture
            - name: Publish plugin
              shell: pwsh
              run: |
                  $runtime = "${{ matrix.runtime }}"
                  $platform = "${{ matrix.platform }}"
                  $publishRoot = "Bored/publish"
                  $publishOutput = Join-Path $publishRoot $runtime

                  if (Test-Path $publishOutput) {
                    Remove-Item -Path $publishOutput -Recurse -Force
                  }

                  dotnet publish "Bored/Community.PowerToys.Run.Plugin.Bored/Community.PowerToys.Run.Plugin.Bored.csproj" `
                    -c Release `
                    -p:Platform=$platform `
                    -r $runtime `
                    --self-contained false `
                    --no-restore `
                    --output $publishOutput

            - name: Get version
              id: get_version
              shell: bash
              run: |
                  if [[ $GITHUB_REF == refs/tags/v* ]]; then
                    echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
                    echo "IS_TAG=true" >> $GITHUB_OUTPUT
                  else
                    echo "VERSION=$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
                    echo "IS_TAG=false" >> $GITHUB_OUTPUT
                  fi

            - name: Debug Output
              run: |
                  Get-ChildItem -Path "Bored" -Recurse -Directory | Where-Object { $_.Name -eq "Release" } | ForEach-Object { Write-Host $_.FullName }
              shell: pwsh

            - name: Create output directory
              run: mkdir -p artifacts

            - name: Copy publish output to artifacts directory
              run: |
                  # Define paths upfront for better performance
                  $artifactDir = "artifacts/Bored-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
                  $publishOutput = "Bored/publish/${{ matrix.runtime }}"

                  if (-not (Test-Path $publishOutput)) {
                    Write-Error "Publish output not found at $publishOutput"
                    Get-ChildItem -Path "Bored/publish" -Recurse -Force -ErrorAction SilentlyContinue
                    exit 1
                  }

                  # Create directories in a single operation
                  New-Item -ItemType Directory -Force -Path "$artifactDir/Bored" | Out-Null

                  Copy-Item -Path (Join-Path $publishOutput '*') -Destination "$artifactDir/Bored" -Recurse -Force

                  # Remove unnecessary files recursively
                  $unnecessaryFiles = @(
                    "PowerToys.Common.UI.dll",
                    "PowerToys.ManagedCommon.dll",
                    "PowerToys.Settings.UI.Lib.dll",
                    "Wox.Infrastructure.dll",
                    "Wox.Plugin.dll",
                    "Microsoft.Windows.SDK.NET.dll",
                    "WinRT.Runtime.dll",
                    "Microsoft.Extensions.Logging.Abstractions.dll",
                    "PowerToys.Common.UI.pdb",
                    "PowerToys.ManagedCommon.pdb",
                    "PowerToys.Settings.UI.Lib.pdb",
                    "Wox.Infrastructure.pdb",
                    "Wox.Plugin.pdb",
                    "Microsoft.Extensions.Logging.Abstractions.pdb"
                  )

                  foreach ($file in $unnecessaryFiles) {
                    Get-ChildItem -Path "$artifactDir/Bored" -Filter $file -Recurse -ErrorAction SilentlyContinue | 
                      Remove-Item -Force -ErrorAction SilentlyContinue
                  }
              shell: pwsh

            - name: Create ZIP archive
              run: |
                  $artifactDir = "artifacts/Bored-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
                  $zipName = "Bored-${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}.zip"
                  # Create ZIP with Bored folder inside
                  Compress-Archive -Path "$artifactDir/Bored" -DestinationPath "artifacts/$zipName"
              shell: pwsh

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts-${{ matrix.platform }}
                  path: artifacts/*.zip

    release:
        needs: build
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/v')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1 # Shallow clone for faster checkout

            - name: Get version from tag
              id: get_version
              run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: downloaded-artifacts
                  merge-multiple: true # Merge artifacts with the same name

            - name: Prepare artifacts for release
              run: |
                  mkdir -p release-artifacts
                  VERSION="${{ steps.get_version.outputs.VERSION }}"

                  # Fast copy with error handling
                  find downloaded-artifacts -name "Bored-${VERSION}-x64.zip" -exec cp {} release-artifacts/ \;
                  find downloaded-artifacts -name "Bored-${VERSION}-ARM64.zip" -exec cp {} release-artifacts/ \;

                  # Verify artifacts were copied
                  if [ ! -f "release-artifacts/Bored-${VERSION}-x64.zip" ]; then
                    echo "Error: x64 artifact not found"
                    exit 1
                  fi

                  if [ ! -f "release-artifacts/Bored-${VERSION}-ARM64.zip" ]; then
                    echo "Error: ARM64 artifact not found"
                    exit 1
                  fi

            - name: Prepare Release Notes
              id: release_notes
              run: |
                  VERSION="${{ steps.get_version.outputs.VERSION }}"
                  cat > release_notes.md << EOL
                  # Bored Plugin v${VERSION}

                  ## 😴 What's New in v${VERSION}

                  ### ✨ Features:
                  - **Random Quotes** - Get inspirational quotes directly from PowerToys Run
                  - **Random Jokes** - Fetch funny jokes to brighten your day
                  - **Currency Exchange** - Convert between 160+ currencies instantly
                  - **World Time** - Look up current time in any timezone
                  - **Cat Facts** - Learn interesting facts about cats
                  - **Dog Pictures** - View random dog images
                  - **Text Transformations** - Transform text (upper, lower, reverse, etc.)

                  ### 🔧 Technical Details:
                  - Built with .NET 9.0 targeting Windows 10.0.22621.0+
                  - Multiple free APIs (open.er-api.com, worldtimeapi.org, catfact.ninja, dog.ceo, etc.)
                  - Theme-aware UI with automatic light/dark mode support
                  - Comprehensive logging for diagnostics
                  - Multi-platform builds (x64 and ARM64)
                  - All dependencies included with CopyLocalLockFileAssemblies

                  ## 📥 Installation

                  1. **Download** the ZIP file for your platform (x64 or ARM64)
                  2. **Extract** to \`%LOCALAPPDATA%\\Microsoft\\PowerToys\\PowerToys Run\\Plugins\\Bored\\\`

                     Full path example:
                     \`\`\`
                     C:\\Users\\YourName\\AppData\\Local\\Microsoft\\PowerToys\\PowerToys Run\\Plugins\\Bored\\
                     \`\`\`
                  3. **Restart PowerToys** (Right-click tray icon → Exit → Start again)
                  4. **Try it!** Press \`Alt+Space\`, type \`bored quote\`

                  ## 📊 Usage Examples

                  \`\`\`
                  bored quote                      # 💭 Get random inspirational quote
                  bored joke                       # 😄 Get random joke
                  bored exchange USD EUR 100        # 💱 Convert 100 USD to EUR
                  bored time Europe/London          # 🕒 Get time in London
                  bored catfact                    # 🐱 Get random cat fact
                  bored dog                        # 🐕 View random dog picture
                  bored text upper Hello            # 📝 Transform text to uppercase
                  \`\`\`

                  ### Commands:
                  - **quote** - Fetch a random inspirational quote
                  - **joke** - Get a random joke
                  - **exchange <from> <to> [amount]** - Convert currencies (e.g., exchange USD EUR 100)
                  - **time <timezone>** - Get current time (e.g., time Europe/London)
                  - **catfact** - Get a random cat fact
                  - **dog** - View a random dog picture
                  - **text <command> <text>** - Transform text (upper, lower, reverse, etc.)

                  ## 🔒 Security & Privacy

                  - ✅ No API keys required
                  - ✅ Free open APIs only
                  - ✅ No tracking or telemetry
                  - ✅ Open source code
                  - ✅ Privacy-first design

                  ---

                  **Need Help?** [Open an issue](https://github.com/ruslanlap/PowerToysRun-Bored/issues) • [View Documentation](https://github.com/ruslanlap/PowerToysRun-Bored#readme)

                  Made with ❤️ by [ruslanlap](https://github.com/ruslanlap)
                  EOL
                  echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
                  cat release_notes.md >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

            - name: Generate SHA256 checksums
              run: |
                  cd release-artifacts
                  VERSION="${{ steps.get_version.outputs.VERSION }}"

                  # Generate checksums in parallel
                  {
                    sha256sum Bored-${VERSION}-x64.zip | tr 'a-f' 'A-F' > Bored-${VERSION}-x64.zip.sha256 &
                    sha256sum Bored-${VERSION}-ARM64.zip | tr 'a-f' 'A-F' > Bored-${VERSION}-ARM64.zip.sha256 &
                    wait
                  }

                  # Create combined checksums file efficiently
                  {
                    echo "SHA256 Checksums for Bored Plugin v${VERSION}"
                    echo "Generated on: $(date -u)"
                    echo ""
                    cat Bored-${VERSION}-x64.zip.sha256
                    cat Bored-${VERSION}-ARM64.zip.sha256
                  } > checksums.txt

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  name: PowerToysRun-Bored v${{ steps.get_version.outputs.VERSION }}
                  body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
                  draft: false
                  prerelease: false
                  files: |
                      release-artifacts/Bored-${{ steps.get_version.outputs.VERSION }}-x64.zip
                      release-artifacts/Bored-${{ steps.get_version.outputs.VERSION }}-ARM64.zip
                      release-artifacts/Bored-${{ steps.get_version.outputs.VERSION }}-x64.zip.sha256
                      release-artifacts/Bored-${{ steps.get_version.outputs.VERSION }}-ARM64.zip.sha256
                      release-artifacts/checksums.txt
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
